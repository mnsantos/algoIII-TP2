\subsection{Complejidad}

Para calcular la complejidad, iremos paso por paso analizando nuestra implementación del algoritmo. Algunas cosas a destacar son; una arista es (nodo, nodo, int peso). La cola es una cola de prioridad, con lo cual se obtiene el menor elemento en O(1).


Analizamos primero como obtener de una cola de prioridad de aristas la de peso minimo, para luego concluir que la complejidad de este procedimiento es O(m.log(n))

\begin{algorithm}[H]
\caption{aristaLiviana}\label{ej2}
\begin{algorithmic}[1]
\Procedure{aristaLiviana}{lista de enlaces}
	\While{no encontre el minimo}
		\State obtener enlace tope y sacarlo de la cola 
		\If{enlace con extremo marcado y otro no marcado}
			\State marcar el extremo q no estaba marcado y retornar enlace
		\EndIf
	\EndWhile
\EndProcedure
\end{algorithmic}
\end{algorithm}


\begin{itemize}
\item Encontrar una arista de peso minimo esta acotado por O(1), ya que solo implica sacar un elemento del tope.
\item Al sacar el elemento de la cola, los elementos restantes deben re-ordenarse, esto es O(log(m)) porque en el peor caso tenemos m aristas en la cola.O(log(m))$\subset$O(log($n^2$)) ya que la cantidad de aristas está acotado por $n^2$. O(log($n^2$)=O(2log(n))=O(log(n)). Por lo tanto esto cuesta O(log(n)).
\item Marcar un nodo es cambiar un atributo booleano del mismo, O(1)
\item Puede ocurrir que la arista del tope tenga sus dos extremos marcados, en tal caso se la remueve y se vuelve a proceder como mucho m veces, esto es O(m) iteraciones.
\end{itemize}  


Ahora veamos la implementacion de Prim, cuya complejidad es O(mlog(n)).

\begin{algorithm}[H]
\caption{NuestroPrim}\label{ej2}
\begin{algorithmic}[1]
\Procedure{Prim}{$G=(V,E)$}
	\State enlaces $\shortleftarrow$ vacia 
	\State marcar 1er nodo
	\State cola $\shortleftarrow$ adyacentes de nodo1
	\While{enlaces $\neq $ n-1}
		\State e = aristaLiviana (cola)
		\State agregar a enlaces e
		\State agregar a cola, adyacentes de nodo no marcado de (u,v)
	\EndWhile
	\State devolver enlaces
\EndProcedure
\end{algorithmic}
\end{algorithm}


\begin{itemize}
\item Las lineas 2, 3, 7 y 8 tienen complejidad O(1).
\item En la linea 4, un nodo puede tener como mucho n-1 adyacentes, con lo cual obtenerlos y agregarlos (para un elemento es log(n)) puede tener una complejidad de O(n.log(n)).
\item Para medir la complejidad del while tendremos en cuenta el numero de llamados a aristaLiviana y a agregar a cola adyacentes de nodo no marcado. Para el primero sabemos que en las n-1 iteraciones del while como mucho haremos m pops cuyo costo es O(log(m))$\subset$O(log(n)) ya que no popearemos más de la cantidad de aristas presentes en el grafo. Para el segundo también recorreremos en las n-1 iteraciones todas las aristas del grafo y las pushearemos con un costo de O(log(m))$\subset$O(log(n)). Por lo tanto la compjeidad del while es O(mlog(n)) + O(mlog(n)) = O(mlog(n)).
\end{itemize}
